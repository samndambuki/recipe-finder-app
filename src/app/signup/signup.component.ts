//import the necessary dependencies for the component to work correctly
import { Component } from '@angular/core';
import { CommonModule } from '@angular/common';
import { RouterModule } from '@angular/router';
import { HttpClient } from '@angular/common/http';
import { FormsModule } from '@angular/forms';
import { User } from '../interfaces/User';
import { UserService } from '../services/user.service';

//compomnent decorator to define meta data s
@Component({
  selector: 'app-signup',
  standalone: true,
  imports: [CommonModule, RouterModule, FormsModule],
  templateUrl: './signup.component.html',
  styleUrls: ['./signup.component.css'],
})

//define class responsible for sign up funtionality
export class SignupComponent {
  //properties declared as string types
  //will hold values entered by the user in the sign up form
  name!: string;
  email!: string;
  password!: string;
  error!: string;

  //initalize http property with an instance of Http Client which allows component make HTTP requests
  //initialize userService property with an instance of UserService
  constructor(private http: HttpClient, private userService: UserService) {}

  isEmailValid(): boolean {
    const emailRegex: RegExp =
      /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}$/;
    return emailRegex.test(this.email);
  }

  //sign up method is triggered when the user clicks sign up button or submits sign up form
  //returns void because it does not return a value
  //performs actions without reurning a specific result
  signUpUser(): void {
    //why new User object?
    //1. pass it in the createUser method to send data to server for user creation
    //2. improve code readability
    //3. perform validations to the user input before sending it to the server

    //newUser object is created of type User
    //ensure consisitency between th eproperty names in newUser object and properties in User interface

    // Check if the email and password are not empty
    if (!this.name || !this.email || !this.password) {
      this.error = 'Please enter your name, email and password';
      return;
    }

    if (!this.isEmailValid()) {
      this.error = 'Please enter a valid email address';
      return;
    }

    const newUser: User = {
      //properties
      //automatically generated by the server
      id: 0,
      //property name
      //this.name represents value enterd by the user in the name input field
      //binds user input to the name property of the new User object
      name: this.name,
      email: this.email,
      password: this.password,
    };

    //this line calls the createUser method of the User service instance
    //passes newUser object as an argument to the method
    //this is where http request to create a new user is initiated
    //subscribe - listens for response from the server after http request is completed
    //it takes a call back funtion as an argument to handle the response
    //purpose of subscribing is to perform necessary actions or updates based on servers response
    ////in this case loging the users credentials and storing in local storage
    this.userService.createUser(newUser).subscribe(
      //callback funtion executed when the reponse is received from the server
      //response parameter holds the response returned from the server
      (response) => {
        //logs success message
        //prints reponse data received from the server
        console.log('User signed up successfully', response);

        //stores user's credentials in browsers local storage
        //set item stores a value with a given key in local storage
        //key is credentials and value is newUser object
        //converted to Json string using JSON.stringify
        localStorage.setItem('credentials', JSON.stringify(newUser));

        this.name = '';
        this.email = '';
        this.password = '';
      },
      (error) => {
        console.log('Error signing up', error);
        this.error = 'An error occurred when signing up';
      }
    );
  }
}
